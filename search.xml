<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[你好，吉林]]></title>
    <url>%2F2019%2F03%2F05%2F%E4%BD%A0%E5%A5%BD%EF%BC%8C%E5%90%89%E6%9E%97%2F</url>
    <content type="text"><![CDATA[我！也想做一只生活博主，美食博主，可惜摄影技术令人着急，点评能力差劲，只有没事水水这样子才能勉强维持生活。接下来的日子，在吉林度过一段时间 :)祝自己诸事顺心var ap=new APlayer({element:document.getElementById("aplayer-qzMivkXn"),narrow:!1,autoplay:!1,showlrc:3,music:{title:"ＷＡＩＴＩＮＧ",author:"ＴＲＡ＄Ｈ",url:"/music/ＴＲＡ＄Ｈ - ＷＡＩＴＩＮＧ.mp3",pic:"/music/meta/517565384.jpg",lrc:"https://blog.30m.cloud/music/meta/517565384.txt"}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)]]></content>
      <categories>
        <category>日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git 仓库删除所有提交历史记录]]></title>
    <url>%2F2019%2F03%2F03%2FGit-%E4%BB%93%E5%BA%93%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[把旧项目提交到Git上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？创建新分支1git checkout --orphan latest_branch添加全部文件1git add -A提交变更1git commit -am "commit message"删除旧分支1git branch -D master将新分支更名为旧分支名1git branch -m master强制提交至旧分支1git push -f origin master至此，一个干净全新的分支就生成了。温馨提示：如果您想参与评论，请确保您可以访问国际网络]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>GIT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Github 快速搭建博客]]></title>
    <url>%2F2019%2F02%2F27%2FHexo-Github-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo 是基于 Node.js 的一款静态博客框架，如果想要搭建博客，不想自己写页面的话可以考虑用 Hexo，其中有很多的简洁主题可供选择，同时 Hexo 支持 Markdown 语法，编辑文章更加方便，快捷。环境配置安装 Hexo 之前，我们需要确认电脑中是否已安装下列应用程序node.jsgit安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。终端输入如下命令:1npm install hexo-cli -g初始化使用终端 cd 到一个您指定的目录，执行以下命令(命令中的 blog 是您将要建立的文件夹的名称)：1hexo init blog使用终端 cd 到 blog 文件夹下，执行以下命令，安装依赖包：1npm install好了，现在可以试试看是否已经初始化成功，执行如下命令，开启本地 Hexo 服务器：1hexo s此时，浏览器中打开类似于 http://localhost:4000 的网址具体端口查看终端(默认是4000端口)关联 GitHub创建仓库登录您的 GitHub 账号，新建名称为 您的用户名.github.io 的仓库。假设我的 GitHub 账号的用户名是 iv8 ，那么我就应该新建名称为 iv8.github.io 的仓库。勾上 Initialize this repository with a README 。点击 Create Repository 完成创建。修改全局配置文件找到本地 blog 文件夹下 _config.yml ，找到对应项，修改成下边的样子：12345url: https://blog.30m.clouddeploy: type: git repository: https://github.com/xxx/xxx.github.io branch: master您需要将 repository 后的所有 xxx 换成你自己的用户名， https://blog.30m.cloud 替换为您自己的域名，如果不需要自定义域名请不要修改 url 配置并跳过 设定 CNAME 解析 步骤设定 CNAME 解析生成 CNAME 文件1echo 'https://blog.30m.cloud' &gt; CNAME您需要将 https://blog.30m.cloud 替换为您自己的域名，之后在域名控制面板设定 CNAME 解析到 iv8.github.io (替换为您自己的地址)配置 Git然后，您需要为自己配置身份信息，终端输入yourname和youremail换成您自己的 GitHub 用户名和邮箱)：12git config --global user.name "yourname"git config --global user.email "youremail"安装 hexo git 扩展1npm install hexo-deployer-git --save完成安装之后，执行 hexo g &amp;&amp; cp CNAME public/ &amp;&amp; hexo d，随后按照提示，分别输入自己的 GitHub 用户名和密码，就会自动推送到您的 Github 仓库。完成上传之后，通过 http://xxx.github.io/ ( xxx 换成您自己的仓库名，也就是用户名)来访问自己刚刚上传的网站。常用指令和发布文章常用指令12345hexo new "postName" //新建文章hexo new page "pageName" //新建页面hexo g //生成静态页面至public目录hexo s //开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo d //将.deploy目录部署到GitHub常用组合清空本地缓存，生成最新版，复制 CNAME 文件，部署1hexo clean &amp;&amp; hexo g &amp;&amp; cp CNAME public/ &amp;&amp; hexo d发布文章终端cd到blog文件夹下，执行如下命令新建文章：1hexo new "xxx"名为 xxx.md 的文件会建在目录 source/_posts 下。所有的文章都会以 md 形式保存在 _post 文件夹中，只要在 _post 文件夹中新建 md 类型的文档，就能在执行 hexo g 的时候被渲染。新建的文章头需要添加一些信息，如下所示：123456---title: xxx //在此处添加你的标题。date: 2016-10-07 13:38:49 //在此处输入创建这篇文章的时间。tags: xxx //在此处输入这篇文章的标签。categories: xxx //在此处输入这篇文章的分类。---文章编辑完成后，终端 cd 到 blog 文件夹下，依次执行如下命令来发布：1hexo clean &amp;&amp; hexo g &amp;&amp; cp CNAME public/ &amp;&amp; hexo d至此，基于 GitHub Pages + Hexo 的博客就完成了。温馨提示：如果您想参与评论，请确保您可以访问国际网络]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPS 怎么使用 SSH 密钥密钥快速(安全)登陆]]></title>
    <url>%2F2019%2F02%2F27%2FVPS-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8-SSH-%E5%AF%86%E9%92%A5%E5%AF%86%E9%92%A5%E5%BF%AB%E9%80%9F-%E5%AE%89%E5%85%A8-%E7%99%BB%E9%99%86%2F</url>
    <content type="text"><![CDATA[可能我们身边有着无数的小伙伴用这各自的无时无刻浏览着墙外的网站，时不时还会观看海外流媒体的视频，追着自己的爱豆🤩，随着小鸡爬墙越来越流行，Linux VPS 的使用也越来越多，Linux 的安全问题也需要日渐加强，如果你安装过 DenyHosts 并设置过邮件提醒，你每天可能会受到数封 DenyHosts Report 将前来破解 SSH 密码的 IP 加入 /etc/hosts.deny。Linux SSH登录有两种：密码登录通常 VPS 开通后都是直接提供 IP 和 root 密码，使用这种方式就是通过密码方式登录。如果密码不够强壮，而且没有安装 DenyHosts 之类的防止 SSH 密码破解的软件，那么系统安全将存在很大的隐患。如果 VPS 使用的弱密码，则很容易轻松被破解，你的机器也就沦为攻击者的肉鸡。密钥登陆基于密钥的安全验证必须为用户自己创建一对密钥，并把公钥放在需要访问的 VPS 上。两个密钥的特性：公钥加密后的密文，只能通过对应的私钥进行解密。而通过公钥推理出私钥的可能性微乎其微。生成密钥t 参数设置密钥类型此处使用 rsa，f 参数指定生成私钥的文件名(路径)使用你的 VPS 运行以下命令生成密钥对，运行时会询问设置私钥(可为空)，运行完成之后会在指定路径生成 pem (私钥)和 pub (公钥)文件1ssh-keygen -t rsa -f test.pem此处一定要注意，一定要生成的私钥文件保存到本地，否则您将无法链接 SSH 只能通过 VNC 链接，并且为了安全起见并从您的 VPS 上删除该私钥配置公钥将生成的公钥追加到当前用户的 authorized_keys 中1cat test.pub &gt;&gt; ~/.ssh/authorized_keys如果没有 ~/.ssh 文件夹则需要先创建，上一行命令没有报错可以忽略进行 下一步1cat test.pub &gt;&gt; ~/.ssh/authorized_keys设置权限1chmod 700 ~/.ssh &amp;&amp; chmod 644 ~/.ssh/authorized_keys配置SSH设置仅私钥登陆并且重启 SSH1234sed -i "s|#PubkeyAuthentication|PubkeyAuthentication|" /etc/ssh/sshd_configsed -i "s|PubkeyAuthentication no|PubkeyAuthentication yes|" /etc/ssh/sshd_configsed -i "s|PasswordAuthentication yes|PasswordAuthentication no|" /etc/ssh/sshd_configsystemctl restart sshd登陆测试密码登陆测试123sh-3.2# ssh centos@13.231.xxx.xxxWarning: Permanently added '13.231.xxx.xxx' (ECDSA) to the list of known hosts.centos@13.231.xxx.xxx: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).可见当前 VPS 已经关闭了密码登陆仅可使用私钥登陆。私钥登陆测试i 参数设置私钥地址路径1234sh-3.2# ssh centos@13.231.xxx.xxx -i test.pemWarning: Permanently added '13.231.xxx.xxx' (ECDSA) to the list of known hosts.Last login: Wed Feb 27 14:48:32 2019 from 223.72.xxx.xxx[centos@ip-172-26-xxx-xxx ~]$如果链接时会提示权限错误请确保私钥文件权限为 600，如果需要修改请执行，正常链接请跳过1sh-3.2# chmod 600 test.pem至此，你的 VPS SSH 密钥登陆就设置完成了。只要私钥保管妥当，暴力破解什么的，不存在的。但是如果一旦丢失私钥文件，可能只有 VNC 和重装能就你。温馨提示：如果您想参与评论，请确保您可以访问国际网络]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人用户如何使用 DNS 服务解锁 Netflix(SSR)]]></title>
    <url>%2F2019%2F02%2F25%2F%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%88%B7%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-DNS-%E6%9C%8D%E5%8A%A1%E8%A7%A3%E9%94%81-Netflix-SSR%2F</url>
    <content type="text"><![CDATA[本篇教程仅适用与个人用户使用 30M云 提供的服务配合指定后端使用，如果您无法正常使用请仔细看完该教程。请不要多复制少复制加空格，谢谢各位大佬！！！！！仓库地址https://github.com/iv8/ssr/https://hub.docker.com/r/i0923/ssr安装教程此处命令默认为 Ubuntu 系统，其他系统请更换为相对应等价命令Docker不建议内存低于 512Mb 的机器使用，需要使用 Python 请 点击更新1apt-get update -y安装 Docker1curl -fsSL https://get.docker.com/ | sh进程守护1systemctl start docker &amp;&amp; systemctl enable docker配置参数需要配置的值为 password, method, protocol, obfs, obfs_param 其他参数仅供有能力者修改1234567891011121314151617181920212223echo '&#123; "server": "0.0.0.0", "server_ipv6": "::", "server_port": 8389, "local_address": "127.0.0.1", "local_port": 1080, "password": "30m", "timeout": 120, "udp_timeout": 60, "method": "chacha20", "protocol": "auth_sha1_v4", "obfs": "http_simple", "obfs_param": "HK2SCH13006913.wns.windows.com", "speed_limit_per_con": 0, "dns_ipv6": false, "connect_verbose_info": 0, "connect_hex_data": 0, "redirect": "", "fast_open": false, "friendly_detect": 1&#125;' &gt; config.json如果您是从 Python 教程来到此处，请点击 返回运行请将下一行命令中的 userkey 替换为产品分配的 key如果您购买的产品是香港并且有观看 TVB 的需求，请将 Docker 容器的 tag 替换为 hkd 参数使容器后台运行，name 参数对容器进行命名，p 参数进行端口映射 456 即为你的机器外网映射端口 8389 为上一步操作的 server_port，restart 参数值为 always 时意义为当容器停止时自动重启容器，可选值 always, no, unless-stopped, on-failure[:max-retries]1docker run -d --name=ssr --restart=always -p 456:8389 -p 456:8389/udp -e KEY=userkey -v `pwd`/config.json:/root/shadowsocksr/config.json i0923/ssr完成安装至此，shadowsocksr Docker 版本已经成功安装到您的 VPS 。常用命令 docker [stop| start| restart| rm] ssrPython如果使用 Python 客户端并使用我提供的进程守护脚本，请不要更改文件下载位置确保其位于 /root/ssr/更新1apt-get update -y配置环境123apt install python-pip git libssl-dev python-dev libffi-dev software-properties-common vim -yadd-apt-repository ppa:ondrej/php -y &amp;&amp; apt update -yapt install libsodium-dev -y获取源码如果您购买的产品是香港并且有观看 TVB 的需求，请将下一行代码中的 master 替换为 hk1cd ~ &amp;&amp; git clone --depth=1 -b master https://github.com/iv8/ssr ssr &amp;&amp; cd ssr配置参数此处代码与 Docker 配置参数相同，请查看 #配置参数 不再赘述。授权请将下一行命令中的 userkey 替换为产品分配的 key运行结果返回 200, 202 均为成功， 如果返回 511 请检查您的 key 是否有效或者已经分配给其他 IP 地址1sed -i "s|30mkey|userkey|" 30m.py &amp;&amp; python 30m.py运行测试如果没有异常显示或者报错并且连接正常，就可以进行下一步1python shadowsocks/server.py -c /root/ssr/config.json守护进程123456789101112131415echo "[Unit]Description=ssr deamonAfter=rc-local.service[Service]Type=simpleUser=rootGroup=rootWorkingDirectory=/root/ssrExecStart=/usr/bin/python shadowsocks/server.py -c /root/ssr/config.jsonRestart=alwaysLimitNOFILE=512000[Install]WantedBy=multi-user.target" &gt; /etc/systemd/system/ssr.serviceecho "sshd: ALL" &gt; /etc/hosts.allow &amp;&amp; systemctl start ssr &amp;&amp; systemctl enable ssr完成安装至此，shadowsocksr Python 版本已经成功安装到您的 VPS 。常用命令 systemctl [stop| start| enable| disable] ssr联系方式如果您看完此篇文章，依旧无法解决，请联系 Telegram 说明来由并打款 50 元，只负责配置，不负责教学。温馨提示：如果您想参与评论，请确保您可以访问国际网络]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>NETFLIX</tag>
        <tag>解锁</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人用户如何使用 DNS 服务解锁 Netflix(SS)]]></title>
    <url>%2F2019%2F02%2F25%2F%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%88%B7%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-DNS-%E6%9C%8D%E5%8A%A1%E8%A7%A3%E9%94%81-Netflix-SS%2F</url>
    <content type="text"><![CDATA[本篇教程仅适用与个人用户使用 30M云 提供的服务配合指定后端使用，如果您无法正常使用请仔细看完该教程。请不要多复制少复制加空格，谢谢各位大佬！！！！！仓库地址https://github.com/iv8/ss/https://hub.docker.com/r/i0923/ss安装教程此处命令默认为 Ubuntu 系统，其他系统请更换为相对应等价命令Docker不建议内存低于 512Mb 的机器使用，需要使用 Python 请 点击更新1apt-get update -y安装 Docker1curl -fsSL https://get.docker.com/ | sh进程守护1systemctl start docker &amp;&amp; systemctl enable docker配置参数需要配置的值为 password, method 其他参数仅供有能力者修改12345678910111213echo '&#123; "server": "0.0.0.0", "server_ipv6": "::", "server_port": 8388, "local_address": "127.0.0.1", "local_port": 1080, "password": "30m", "timeout": 120, "udp_timeout": 60, "method": "chacha20", "fast_open": false&#125;' &gt; config.json如果您是从 Python 教程来到此处，请点击 返回运行请将下一行命令中的 userkey 替换为产品分配的 key如果您购买的产品是香港并且有观看 TVB 的需求，请将 Docker 容器的 tag 替换为 hkd 参数使容器后台运行，name 参数对容器进行命名，p 参数进行端口映射 456 即为你的机器外网映射端口 8388 为上一步操作的 server_port，restart 参数值为 always 时意义为当容器停止时自动重启容器，可选值 always, no, unless-stopped, on-failure[:max-retries]1docker run -d --name=ss --restart=always -p 456:8388 -p 456:8388/udp -e KEY=userkey -v `pwd`/config.json:/root/shadowsocks/config.json i0923/ss完成安装至此，shadowsocks Docker 版本已经成功安装到您的 VPS 。常用命令 docker [stop| start| restart| rm] ssPython如果使用 Python 客户端并使用我提供的进程守护脚本，请不要更改文件下载位置确保其位于 /root/ss/更新1apt-get update -y配置环境123apt install python-pip git libssl-dev python-dev libffi-dev software-properties-common vim -yadd-apt-repository ppa:ondrej/php -y &amp;&amp; apt update -yapt install libsodium-dev -y获取源码如果您购买的产品是香港并且有观看 TVB 的需求，请将下一行代码中的 master 替换为 hk1cd ~ &amp;&amp; git clone --depth=1 -b master https://github.com/iv8/ss ss &amp;&amp; cd ss配置参数此处代码与 Docker 配置参数相同，请查看 #配置参数 不再赘述。授权请将下一行命令中的 userkey 替换为产品分配的 key运行结果返回 200, 202 均为成功， 如果返回 511 请检查您的 key 是否有效或者已经分配给其他 IP 地址1sed -i "s|30mkey|userkey|" 30m.py &amp;&amp; python 30m.py运行测试如果没有异常显示或者报错并且连接正常，就可以进行下一步1python shadowsocks/server.py -c config.json守护进程123456789101112131415echo "[Unit]Description=ss deamonAfter=rc-local.service[Service]Type=simpleUser=rootGroup=rootWorkingDirectory=/root/ssExecStart=/usr/bin/python shadowsocks/server.py -c config.jsonRestart=alwaysLimitNOFILE=512000[Install]WantedBy=multi-user.target" &gt; /etc/systemd/system/ss.serviceecho "sshd: ALL" &gt; /etc/hosts.allow &amp;&amp; systemctl start ss &amp;&amp; systemctl enable ss完成安装至此，shadowsocks Python 版本已经成功安装到您的 VPS 。常用命令 systemctl [stop| start| enable| disable] ss联系方式如果您看完此篇文章，依旧无法解决，请联系 Telegram 说明来由并打款 50 元，只负责配置，不负责教学。温馨提示：如果您想参与评论，请确保您可以访问国际网络]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>NETFLIX</tag>
        <tag>解锁</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
  </entry>
</search>
